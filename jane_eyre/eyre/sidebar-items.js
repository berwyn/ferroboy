initSidebarItems({"fn":[["set_hook","Install the provided error hook for constructing EyreHandlers when converting Errors to Reports"]],"macro":[["anyhow","Construct an ad-hoc error from a string."],["bail","Return early with an error."],["ensure","Return early with an error if a condition is not satisfied."],["eyre","Construct an ad-hoc error from a string."],["format_err","Construct an ad-hoc error from a string."]],"struct":[["Chain","Iterator of a chain of source errors."],["DefaultContext","The default provided error report handler for `eyre::Report`."],["DefaultHandler","The default provided error report handler for `eyre::Report`."],["ErrReport","The core error reporting type of the library, a wrapper around a dynamic error reporting type."],["Error","The core error reporting type of the library, a wrapper around a dynamic error reporting type."],["InstallError","Error indicating that `set_hook` was unable to install the provided ErrorHook"],["Report","The core error reporting type of the library, a wrapper around a dynamic error reporting type."]],"trait":[["Context","Provides the `wrap_err` method for `Result`."],["ContextCompat","Provides the `context` method for `Option` when porting from `anyhow`"],["EyreContext","Error Report Handler trait for customizing `eyre::Report`"],["EyreHandler","Error Report Handler trait for customizing `eyre::Report`"],["WrapErr","Provides the `wrap_err` method for `Result`."]],"type":[["Result","type alias for `Result<T, Report>`"]]});